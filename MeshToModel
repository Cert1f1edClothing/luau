local MeshToModel: BasePart & (meshId: number) -> Model = newproxy(true); do
	local wedge = Instance.new("WedgePart");

	wedge.Anchored = true;
	wedge.BottomSurface = Enum.SurfaceType.Smooth;

	local AssetService = game:GetService("AssetService");

	local metatable = getmetatable(MeshToModel);
	local tableFreeze = table.freeze;
	local mathSin = math.sin;
	local mathCos = math.cos;
	local cframeNew = CFrame.new;
	local vector3New = Vector3.new;

	local function drawTriangle(a: Vector3, b: Vector3, c: Vector3, parent: Instance)
		local edges = tableFreeze({
			{direction0 = (c - a), direction1 = (b - a), origin = a},
			{direction0 = (a - b), direction1 = (c - b), origin = b},
			{direction0 = (b - c), direction1 = (a - c), origin = c}
		})

		local edge = edges[1];

		for i = 2, #edges do
			if (edges[i].direction0.Magnitude > edge.direction0.Magnitude) then
				edge = edges[i];
			end
		end

		local theta = math.acos(edge.direction0.Unit:Dot(edge.direction1.Unit));
		local w1 = mathCos(theta) * edge.direction1.Magnitude;
		local w2 = edge.direction0.Magnitude - w1;
		local h = mathSin(theta) * edge.direction1.Magnitude;

		local p1 = edge.origin + edge.direction1 * 0.5;
		local p2 = edge.origin + edge.direction0 + (edge.direction1 - edge.direction0) * 0.5;

		local right = edge.direction0:Cross(edge.direction1).Unit;
		local up = right:Cross(edge.direction0).Unit;
		local back = edge.direction0.Unit;

		local cf1 = CFrameNew(
			p1.X, p1.Y, p1.Z,
			-right.X, up.X, back.X,
			-right.Y, up.Y, back.Y,
			-right.Z, up.Z, back.Z
		);

		local cf2 = CFrameNew(
			p2.X, p2.Y, p2.Z,
			right.X, up.X, -back.X,
			right.Y, up.Y, -back.Y,
			right.Z, up.Z, -back.Z
		);

		local wedge1 = wedge:Clone();

		wedge1.Size = vector3New(0, h, w1);
		wedge1.CFrame = cf1;
		wedge1.Parent = parent;

		local wedge2 = wedge:Clone();

		wedge2.Size = vector3New(0, h, w2);
		wedge2.CFrame = cf2;
		wedge2.Parent = parent;
	end

	function metatable.__call(_, meshId: number): Model
		local model = Instance.new("Model");
		local editableMesh = AssetService:CreateEditableMeshAsync("rbxassetid://"..tostring(meshId));

		for i, v in ipairs(editableMesh:GetTriangles()) do
			local vertices = {editableMesh:GetTriangleVertices(v)};

			drawTriangle(editableMesh:GetPosition(vertices[1]), editableMesh:GetPosition(vertices[2]), editableMesh:GetPosition(vertices[3]), model);
		end

		editableMesh:Destroy();
		return model;
	end

	function metatable.__newindex(_, k, v)
		wedge[k] = v;
	end
	
	table.freeze(metatable);
end

return MeshToModel;
--Made by Cert1f1edClothing
