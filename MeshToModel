--// SERVICES

local AssetService = game:GetService("AssetService");

--// FUNCTIONS

local main: BasePart & (meshId: number) -> Model = newproxy(true); do
	local wedge = Instance.new("WedgePart");
	
	wedge.Anchored = true;
	wedge.BottomSurface = Enum.SurfaceType.Smooth;
	
	local metatable = getmetatable(main);
	
	local function drawTriangle(a: Vector3, b: Vector3, c: Vector3, parent: Instance)
		local edges = {
			{direction0 = (c - a), direction1 = (b - a), origin = a},
			{direction0 = (a - b), direction1 = (c - b), origin = b},
			{direction0 = (b - c), direction1 = (a - c), origin = c}
		}
		
		local edge = edges[1];
		
		for i = 2, #edges do
			if (edges[i].direction0.magnitude > edge.direction0.magnitude) then
				edge = edges[i];
			end
		end
		
		local theta = math.acos(edge.direction0.unit:Dot(edge.direction1.unit));
		local w1 = math.cos(theta) * edge.direction1.magnitude;
		local w2 = edge.direction0.magnitude - w1;
		local h = math.sin(theta) * edge.direction1.magnitude;
		
		local p1 = edge.origin + edge.direction1 * 0.5;
		local p2 = edge.origin + edge.direction0 + (edge.direction1 - edge.direction0) * 0.5;
		
		local right = edge.direction0:Cross(edge.direction1).unit;
		local up = right:Cross(edge.direction0).unit;
		local back = edge.direction0.unit;
		
		local cf1 = CFrame.new(
			p1.x, p1.y, p1.z,
			-right.x, up.x, back.x,
			-right.y, up.y, back.y,
			-right.z, up.z, back.z
		);
		
		local cf2 = CFrame.new(
			p2.x, p2.y, p2.z,
			right.x, up.x, -back.x,
			right.y, up.y, -back.y,
			right.z, up.z, -back.z
		);
		
		local wedge1 = wedge:Clone();
		
		wedge1.Size = Vector3.new(0, h, w1);
		wedge1.CFrame = cf1;
		wedge1.Parent = parent;
		
		local wedge2 = wedge:Clone();
		
		wedge2.Size = Vector3.new(0, h, w2);
		wedge2.CFrame = cf2;
		wedge2.Parent = parent;
	end
	
	function metatable.__call(_, meshId: number): Model
		local model = Instance.new("Model");
		local editableMesh = AssetService:CreateEditableMeshAsync("rbxassetid://"..tostring(meshId));
		
		for i, v in ipairs(editableMesh:GetTriangles()) do
			local vertices = {editableMesh:GetTriangleVertices(v)};
			
			drawTriangle(editableMesh:GetPosition(vertices[1]), editableMesh:GetPosition(vertices[2]), editableMesh:GetPosition(vertices[3]), model);
		end
		
		editableMesh:Destroy();
		return model;
	end
	
	function metatable.__newindex(_, k, v)
		wedge[k] = v;
	end
end

return main;
--Made by Cert1f1edClothing
